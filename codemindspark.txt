
/* 
   You can use System.out.println for debugging purposes, e.g.
   System.out.println("this is a debug message");
*/

package com.psl;

public class Client {

	public static int getMinimumTowers(int n, int k,int[] d){
		
	/* Write your code here
	   Do not write System.out.println here or any other printing statements
       Your code may get 0 marks if you do not follow above instruction. 
	*/
		
		int distanceToUncoveredBuilding=d[0];
		int numberOfTower=0;
		
		int currBuilding=1;
		while (currBuilding<n){
			// loop through each building (starting with the second one)
			if (distanceToUncoveredBuilding>k){
				// tower must be added to the previous building
				numberOfTower++;
				
				int distanceToTower=d[currBuilding-1];
				while (distanceToTower <=k){
					// the current building is covered.  To to next one

					if (currBuilding>=n-1){
						// Last building.  all buildings are covered:
						return numberOfTower;
					}
					
					
					currBuilding++;
					distanceToTower+=d[currBuilding-1];
				}
				
				// This building is not covered
				if (currBuilding>=n-1){
					// the last building
					numberOfTower++;
					return numberOfTower;
				}
				
				// Not the last one
				currBuilding++;
				distanceToUncoveredBuilding=d[currBuilding-1];
				
				
			}
			else {
				// This building can still cover all the previous buildings
				if (currBuilding>=n-1){
					// the last building
					numberOfTower++;
					return numberOfTower;
				}
				
				// Not the last one
				currBuilding++;
				distanceToUncoveredBuilding+=d[currBuilding-1];
				
				
			}
				
		}

		
	 return numberOfTower;
	}
	public static void main(String args[])
	{
	    /*
	        You can use Console input as well with the help of Scanner or BufferedReader classes.
		Please provide input data in Input box on right side of window.
	    */
       int n=8;
       int k=2;
       int d[]={2, 1, 1, 1, 2, 2, 1};
		
	   System.out.println(getMinimumTowers(n,k,d));
	}

}


